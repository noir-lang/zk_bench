{"noir_version":"0.25.0+3f676051a6073d6eabdc7fee68e4b522334344f6","hash":16543310558579020838,"abi":{"parameters":[{"name":"x","type":{"kind":"array","length":2,"type":{"kind":"integer","sign":"unsigned","width":8}},"visibility":"private"},{"name":"result","type":{"kind":"array","length":32,"type":{"kind":"integer","sign":"unsigned","width":8}},"visibility":"private"}],"param_witnesses":{"result":[{"start":2,"end":34}],"x":[{"start":0,"end":2}]},"return_type":null,"return_witnesses":[]},"bytecode":"H4sIAAAAAAAA/+2dZ2/bSBCGSRWLVO+9xXFJc0J1KY4TG7gP9zfiiwPky+FwuP+P26GX8GayEQXcDKEJjsAg+47inecdq7Bpfec4zm/O4+aqSOmxZ2gX6RTSaaQzSGeRPkE6h7SHtI90HukC0kWkS0iXka4gXUW6hnQd6QbSTaRbSLeR7iDdRbqHdB/pAdJDpEdIj5GeID1F+pmh087Tc8Qx8p7+OdhOVTxXcabiXMWFiksVL1S8VPFKxWsVb1RcqXir4p2KQMVMxVzFQsVSxUrFWsVGxVbFTsV7FdcqPqi4UfFRxScVtyruNKOrWVyDyzFyjv7/sAX/bZud0s0VcDE+F8B4JoDxXADjhQDGSwGMLwQwvhTA+EoA42sBjG8EMF4JYHwrgPGdAMZAAONMAONcAONCAONSAONKAONaAONGAONWAONOAON7AYzXAhg/CGC8EcD4UQDjJwGMtwIY7xgYv2lIz3naplR1lvMAzq+HJ+GdH899pozHon89nXe1dlE+pXUK5dNap1E+o3UG5bNaZ1H+ROsTlM9pnUN5L9Io72vto3xe6zzKF7QuoHxR6yLKl7QuoXxZ6zLKV7SuoHxV6yrK17SuoXxd6zrKN7RuoHxT6ybKt7RuoXxb6zbKd7TuoHxX6y7K97TuoXxf6z7KD7QeoPxQ6yHKj7QeofxY6zHKT7SeGPnoMdimDtVrLghg3jT1vOr9B66NXei54LrUNHrtOk+eMgx1XcNPNHekM5baLmFtmDdH7mm5heuEWef7zUV6aoxzhs8Tch4un4/PRc9gp5l3cw9z+EZ/sqhPJeNxs77P0DvXqBvNHWnfUpuuD3M4XRNeg97Xh7yFJZ9wH/KW2nR9WIfPh0JMHwoWlkLCfShYahP2AQ6hw3sO9vWhaGEpJtyHoqU2YR8eIq/7+lCysJQS7kPJUpuwD3AaMrzHZF8fyhaWcsJ9MBkP5fWPgNdDY5rai88wRyWmDxULSyXhPpiMh/L6R8DroTFN7TVc4gn3jff1oWphqSbch6qlNuH+WbhfUovpQ83CUku4Dybjr8pbOQJeD41pam/C/Z16TB/qFpZ6wn0wGQ/l9Y+A10NjmtrzP2CORkwfGhaWRsJ9MBkP5fWPgNdDY5ra6/D31ozpQ9PC0ky4D01LbcI+wKXz8F7qfX1oWVhaCffBZDyUt3gEvB4a09Rew6X68J73fX1oW1jaCfehbalN+LkZHhd2YvrQsbB0Eu5Dx1Kb8PkAt0WE33HY14euhaWbcB9MxkN5fWG85SPg9dCYpvYCblkLvzuzrw89C0sv4T70LLUJ+xAeF/Zj+tC3sPQT7oPJeChvXRivL4y3LYy3dgS8HhrT1N6E948MYvowsLAMEu6DyXgob1MYry+MtyyM1xPGK+35kBfGWxDGWxTGWxLG+//776/fXw+NaWpvwvOIw5g+DC0sw4T7YDIeyls8Al4PjWlqb8Lj+VFMH0YWllHCfTAZD+UtCONtCeMtCuNtCuMtCeOV9nqT9vxtC+OV9nqT9v4rrb9VYby+MN66MN5j6K+HxjS1N+H1+XFMH8YWlnHCfTAZD+UtCOMtCeNtC+PtCOP1hfGWj4DXQ2Oa2ovwvpVJTB8mFpZJwn2YWGoTfl58iert68PUwjJNuA9TlJfCa34v1KWrHeQN73/9/e3Pfxy0ZSxjAEghQNeY6HfjZ3KWeVzn+y/ZTn+SN+fxnR+/mEv2GzDnTKG5F8F6uXzYzB9mi9nnYL67366C5ep+vZ1tZ6vt6st8u1g8bJfbze5+twl2s+XiYfZ1tVt81ZOnCDlP6eYKOD2nCT1zrFLL4TlD6PlMiOcsoedzIZ5PCD1zrMrL4TlH6PlSiGe6vSOeVYM5PPuEnjlWIebwnCf0zLGqMYfnAqFnjlWSOTwXCT1zrLrM4blE6PlKiOcyoWeOVaE5PFcIPXOsMs3huUromWPVag7PNULPHKtgc3iuE3rmWFWbw3OD0DPHKt0cnpuEnjlW/ebw3CL0zLGKOIfnNqFnjlXJOTx3CD1zrHLO4blL6Jlj1XQOzz1CzxyrsHN47hN65ljVncPzgNDztRDPQ0LPHKvOc3geEXq+EeJ5TOiZY1V8Ds8TQs8cq+xzeJ4Ser4V4vkZoec7Qs9wYTtaSfvU8B9daIfH4PoiXG+D609wPSZayRjOX8P5XDi/Ga3KCeeD4PwInC+A42c4noTjKzjegP1v2B+F/TPYX4HPb/g8g/d3eL+D1z+8HqbO4195/en2LzwRdTQneAAA","debug_symbols":"ndzBSiVXFIXhd6mxBPfa95yq8lVCBqZjQBC7aU0giO8eJW0GjZPzzW5xWaP9U4NvUC/bw9cvt8/3Xx+ftpuXrS/bza8v29O328f3x6fn2+/P2016Xm13j3+8/Rrz9Wr78/7hbru57K+/XW09Pl3MfCyO/LyYny7O8WPRVT8v9uXFsbw4VxeX6+VFLS+yvOjlxWV5MZYXyze/LN/8snzzy/LNx/LNx/LNx/LNx/LNx/LNx/LNx/LNx/LNx/LNx/LN5/LN5/LN5/LN5/LN5/LN5/LN5/LN5/q7ffwCr/e30Qmjz1/y++gfo30//h91PkYlo8ioZXSR0ZDRlNEuo0NGJ4yGFDGkiCFFDCliSBFDihhSxJAihhQxpIgpRUwpYkoRU4qYUsSUIqYUMaWIKUVMKWKXInYpYpcidililyJ2KWKXInYpYpcidinikCIOKeKQIg4p4pAiDinikCIOKeKQIg4p4pQiTinilCJOKeKUIk4p4pQiTinilCJOKaKur2lVtAqtmlYXWg1aTVrttDpoRW0UtVHURlEbRW0UtVHURlEbRW0UtVHURqiNUBuhNkJthNoItRFqI9RGqI1QG01tNLXR1EZTG01tNLXR1EZTG01tNLVBuFmkm0W8WeSbRcBZJJxFxFlknEXIWaScRcxZ5JxF0FkknUXUWWSdRdhZpJ1F3FnknUXgWSSeReRZZJ5F6FmknkXsWeSeRfBZJJ9F9Flkn0X4WaSfRfxZ5J9FAFokoEUEWmSgRQhapKBFDFrkoEUQWiShRRRaZKFFGFqkoUUcWuShRSBaJKJFJFpkokUoWqSiRSxa5KIhFw25aMhFQy4actGQi4ZcNOSiIRcNuWjIRUMuGnLRkIuGXDTkoiEXDbloyEVDLhpy0ZCLhlw05KIhFw25aMhFQy4actGQi4ZcNOSiIRcNuWjIRUMuGnLRkIuGXDTkoiEXDbloyEVDLhpy0ZCLhlw05KIhFw25aMhFQy4actGQi4ZcNOSiIRcNuWjIRUMuGnLRkIuGXDTkoiEXDbloyEVDLhpy0ZCLhlw05KIhFw25aMhFQy4actGQi4ZcNOSiIRcNuWjIRUMuGnLRkIuGXDTkoiEXDbloyEVDLhpy0ZCLhlw05KIhFw25aMhFQy7a5KJNLtrkok0u2uSiTS7a5KJNLtrkok0u2uSiTS7a5KJNLtrkok0u2uSiTS7a5KJNLtrkok0u2uSiTS7a5KJNLtrkok0u2uSiTS7a5KJNLtrkok0u2uSiTS7a5KJNLtrkok0u2uSiTS7a5KJNLtrkok0u2uSiTS7a5KJNLtrkok0u2uSiTS7a5KJNLtrkok0u2uSiveqibw9/336/v/394e79+1Lv//31+OXjc1Nvj8//fPvvn9d/AQ==","file_map":{"32":{"source":"mod hash;\nmod array;\nmod slice;\nmod merkle;\nmod schnorr;\nmod ecdsa_secp256k1;\nmod ecdsa_secp256r1;\nmod eddsa;\nmod grumpkin_scalar;\nmod grumpkin_scalar_mul;\nmod scalar_mul;\nmod sha256;\nmod sha512;\nmod field;\nmod ec;\nmod unsafe;\nmod collections;\nmod compat;\nmod convert;\nmod option;\nmod string;\nmod test;\nmod cmp;\nmod ops;\nmod default;\nmod prelude;\nmod uint128;\nmod bigint;\nmod internal;\n\n// Oracle calls are required to be wrapped in an unconstrained function\n// Thus, the only argument to the `println` oracle is expected to always be an ident\n#[oracle(print)]\nunconstrained fn print_oracle<T>(with_newline: bool, input: T) {}\n\nunconstrained pub fn print<T>(input: T) {\n    print_oracle(false, input);\n}\n\nunconstrained pub fn println<T>(input: T) {\n    print_oracle(true, input);\n}\n\n#[foreign(recursive_aggregation)]\npub fn verify_proof<N>(verification_key: [Field], proof: [Field], public_inputs: [Field], key_hash: Field) {}\n\n// Asserts that the given value is known at compile-time.\n// Useful for debugging for-loop bounds.\n#[builtin(assert_constant)]\npub fn assert_constant<T>(x: T) {}\n// from_field and as_field are private since they are not valid for every type.\n// `as` should be the default for users to cast between primitive types, and in the future\n// traits can be used to work with generic types.\n#[builtin(from_field)]\nfn from_field<T>(x: Field) -> T {}\n\n#[builtin(as_field)]\nfn as_field<T>(x: T) -> Field {}\n\npub fn wrapping_add<T>(x: T, y: T) -> T {\n    crate::from_field(crate::as_field(x) + crate::as_field(y))\n}\n\npub fn wrapping_sub<T>(x: T, y: T) -> T {\n    //340282366920938463463374607431768211456 is 2^128, it is used to avoid underflow\n    crate::from_field(crate::as_field(x) + 340282366920938463463374607431768211456 - crate::as_field(y))\n}\n\npub fn wrapping_mul<T>(x: T, y: T) -> T {\n    crate::from_field(crate::as_field(x) * crate::as_field(y))\n}\n","path":"std/lib.nr"},"47":{"source":"use dep::std;\n\nfn main(x: [u8; 2], result: [u8; 32]) {\n    // We use the `as` keyword here to denote the fact that we want to take just the first byte from the x Field\n    // The padding is taken care of by the program\n    let digest = std::hash::sha256(x);\n    std::println(digest);\n    assert(digest == result);\n}\n","path":"/Users/guillaume/src/zk_bench/tests/sha256/src/main.nr"}}}